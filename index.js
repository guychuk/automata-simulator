(()=>{"use strict";var __webpack_modules__={570:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AutomatonIterator = void 0;\nconst automaton_1 = __webpack_require__(719);\nclass AutomatonIterator {\n    constructor(word, automaton, initialState) {\n        if (word.some(char => !automaton.alphabet.has(char))) {\n            throw new Error("invalid characters");\n        }\n        this.automaton = automaton;\n        if (initialState === undefined) {\n            this.currentConfigurations = new Set([(0, automaton_1.makeConfiguration)(automaton.initialState, word)]);\n        }\n        else if (!automaton.states.has(initialState)) {\n            throw new Error("initial state is not in the states set");\n        }\n        else {\n            this.currentConfigurations = new Set([(0, automaton_1.makeConfiguration)(initialState, word)]);\n        }\n        this.word = word;\n        this.done = false;\n        this.visitedConfigurations = new Set();\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        var _a, _b, _c, _d;\n        if (this.done || this.currentConfigurations.size === 0) {\n            this.done = true;\n            return { value: this.currentConfigurations, done: this.done };\n        }\n        const nextConfigurations = new Set();\n        const acceptingConfigurations = new Set();\n        for (let configuration of this.currentConfigurations) {\n            if (configuration.word.length === 0 && this.automaton.acceptingStates.has(configuration.state)) {\n                acceptingConfigurations.add(configuration);\n                continue; // we\'ll be done after the loop\n            }\n            // epsilon transitions\n            (_b = (_a = this.automaton.transitions.get(configuration.state)) === null || _a === void 0 ? void 0 : _a.get(\'\')) === null || _b === void 0 ? void 0 : _b.forEach(dest => {\n                if (Array.from(this.visitedConfigurations).\n                    every(conf => conf.state !== dest || conf.word !== configuration.word)) {\n                    // add iff not already visited!\n                    nextConfigurations.add((0, automaton_1.makeConfiguration)(dest, configuration.word));\n                    this.visitedConfigurations.add((0, automaton_1.makeConfiguration)(dest, configuration.word));\n                }\n            });\n            if (configuration.word.length > 0) {\n                // non-epsilon transitions\n                (_d = (_c = this.automaton.transitions.get(configuration.state)) === null || _c === void 0 ? void 0 : _c.get(configuration.word[0])) === null || _d === void 0 ? void 0 : _d.forEach(dest => {\n                    if (Array.from(this.visitedConfigurations).\n                        every(conf => conf.state !== dest || conf.word !== configuration.word.slice(1))) {\n                        nextConfigurations.add((0, automaton_1.makeConfiguration)(dest, configuration.word.slice(1)));\n                        this.visitedConfigurations.add((0, automaton_1.makeConfiguration)(dest, configuration.word.slice(1)));\n                    }\n                });\n            }\n        }\n        this.done = acceptingConfigurations.size > 0;\n        if (!this.done) {\n            this.currentConfigurations = nextConfigurations;\n        }\n        return { value: this.currentConfigurations, done: this.done };\n    }\n    return(value) {\n        this.clear();\n        return { value: value, done: true };\n    }\n    throw(e) {\n        this.clear();\n        throw new Error(e);\n    }\n    getWord() { return this.word.slice(); }\n    ;\n    getConfigurations() { return new Set(this.currentConfigurations); }\n    ;\n    getStates() {\n        const states = new Set();\n        this.currentConfigurations.forEach(configuration => states.add(configuration.state));\n        return states;\n    }\n    ;\n    clear() {\n        this.word = [];\n        this.done = true;\n        this.currentConfigurations.clear();\n    }\n}\nexports.AutomatonIterator = AutomatonIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///570\n')},719:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.DFA = exports.NFA = exports.makeConfiguration = void 0;\nconst util_1 = __webpack_require__(229);\nconst automaton_iterator_1 = __webpack_require__(570);\nconst makeConfiguration = (state, word) => ({ state: state, word: word });\nexports.makeConfiguration = makeConfiguration;\nclass NFA {\n    constructor(alphabet, states, acceptigStates, initialState, transitions) {\n        this.alphabet = alphabet;\n        this.states = states;\n        this.acceptingStates = acceptigStates;\n        this.initialState = initialState;\n        this.transitions = transitions;\n        if (this.alphabet.size === 0) {\n            throw new Error("the alphabet must not be empty");\n        }\n        if (this.isDeterministic() && alphabet.has(\'\')) {\n            throw new Error("epsilon transitions are not allowed in a DFA");\n        }\n        if (this.states.size === 0) {\n            throw new Error("the set of states must not be empty");\n        }\n        if (!(0, util_1.isSubset)(acceptigStates, states)) {\n            throw new Error("accepting states set is not a subset of the states set");\n        }\n        if (!states.has(initialState)) {\n            throw new Error("initial state set is not in the states set");\n        }\n        if (!this.transitionsAreValid()) {\n            throw new Error("transition function is not valid");\n        }\n    }\n    static create(alphabet, states, acceptigStates, initialState, transitions) {\n        var transitionsMap = new Map();\n        for (let transition of transitions) {\n            if (transition.length != 3) {\n                throw new Error("invalid transition");\n            }\n            const [src, char, dest] = transition;\n            const current = transitionsMap.get(src);\n            if (current !== undefined) {\n                const transitionsSet = current.get(char);\n                if (transitionsSet !== undefined) {\n                    transitionsSet.add(dest);\n                }\n                else {\n                    current.set(char, new Set([dest]));\n                }\n            }\n            else {\n                transitionsMap.set(src, new Map([[char, new Set([dest])]]));\n            }\n        }\n        return new this(new Set(alphabet), new Set(states), new Set(acceptigStates), initialState, transitionsMap);\n    }\n    isDeterministic() { return false; }\n    ;\n    iteratorForWord(word) {\n        return new automaton_iterator_1.AutomatonIterator(typeof word === "string" ? word.split(\'\') : word, this);\n    }\n    acceptsWord(word) {\n        const it = this.iteratorForWord(word);\n        var result = it.next();\n        while (!result.done) {\n            result = it.next();\n        }\n        const val = result.value;\n        return val.size > 0;\n    }\n    /**\n     * Check if the transitions are valid.\n     * @returns true if the trasitions are valid.\n     */\n    transitionsAreValid() {\n        for (let [source, transitions] of this.transitions) {\n            // source state is in the set of states\n            if (!this.states.has(source)) {\n                return false;\n            }\n            for (let [char, destinations] of transitions) {\n                if (this.isDeterministic() && destinations.size > 1) {\n                    return false;\n                }\n                if (!this.alphabet.has(char) && (this.isDeterministic() || char !== \'\')) {\n                    return false;\n                }\n                for (let destination of destinations) {\n                    // destination is a state in the set of states\n                    if (!this.states.has(destination)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\nexports.NFA = NFA;\n;\nclass DFA extends NFA {\n    isDeterministic() { return true; }\n}\nexports.DFA = DFA;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///719\n')},229:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.isSubset = isSubset;\nexports.randomInteger = randomInteger;\nexports.flipCoin = flipCoin;\nexports.randomElements = randomElements;\nfunction isSubset(sub, sup) {\n    for (let item of sub)\n        if (!sup.has(item))\n            return false;\n    return true;\n}\nfunction randomInteger(lower, upper) {\n    return Math.floor(lower + Math.random() * (upper - lower + 1));\n}\n;\nfunction flipCoin(p) {\n    return Math.random() <= p;\n}\nfunction randomElements(population, count) {\n    const arr = Array.from(population);\n    const chosen = [];\n    var current;\n    while (chosen.length < count && arr.length > 0) {\n        current = randomInteger(0, arr.length - 1);\n        chosen.push(arr[current]);\n        arr.splice(current, 1);\n    }\n    return chosen;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsNEJBTUM7QUFFRCxzQ0FFQztBQUVELDRCQUVDO0FBRUQsd0NBWUM7QUE1QkQsU0FBZ0IsUUFBUSxDQUFJLEdBQVcsRUFBRSxHQUFXO0lBQ2hELEtBQUssSUFBSSxJQUFJLElBQUksR0FBRztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDZCxPQUFPLEtBQUssQ0FBQztJQUVyQixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEtBQWEsRUFBRSxLQUFhO0lBQ3RELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFBQSxDQUFDO0FBRUYsU0FBZ0IsUUFBUSxDQUFDLENBQVM7SUFDOUIsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFnQixjQUFjLENBQUksVUFBdUIsRUFBRSxLQUFhO0lBQ3BFLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO0lBQ3ZCLElBQUksT0FBTyxDQUFDO0lBRVosT0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxDQUFDO1FBQzVDLE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9tYXRhLy4vc3JjL2F1dG9tYXRvbi91dGlsLnRzPzRlODIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2V0PFQ+KHN1YjogU2V0PFQ+LCBzdXA6IFNldDxUPikgOiBib29sZWFuIHtcclxuICAgIGZvciAobGV0IGl0ZW0gb2Ygc3ViKVxyXG4gICAgICAgIGlmICghc3VwLmhhcyhpdGVtKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tSW50ZWdlcihsb3dlcjogbnVtYmVyLCB1cHBlcjogbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihsb3dlciArIE1hdGgucmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmbGlwQ29pbihwOiBudW1iZXIpIDogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA8PSBwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tRWxlbWVudHM8VD4ocG9wdWxhdGlvbjogSXRlcmFibGU8VD4sIGNvdW50OiBudW1iZXIpIDogVFtdIHtcclxuICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20ocG9wdWxhdGlvbik7XHJcbiAgICBjb25zdCBjaG9zZW46IFRbXSA9IFtdO1xyXG4gICAgdmFyIGN1cnJlbnQ7XHJcblxyXG4gICAgd2hpbGUgKGNob3Nlbi5sZW5ndGggPCBjb3VudCAmJiBhcnIubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgY3VycmVudCA9IHJhbmRvbUludGVnZXIoMCwgYXJyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIGNob3Nlbi5wdXNoKGFycltjdXJyZW50XSk7XHJcbiAgICAgICAgYXJyLnNwbGljZShjdXJyZW50LCAxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hvc2VuO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///229\n')},156:function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\n}) : function(o, v) {\n    o["default"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst automaton_1 = __webpack_require__(719);\nconst automata_util_1 = __webpack_require__(596);\nconst Drawer = __importStar(__webpack_require__(669));\nconst canvas = document.getElementById("canvas");\nconst randomAutomatonButton = document.getElementById("random-automaton");\nconst submitAutomatonButton = document.getElementById("submit");\nconst randomWordButton = document.getElementById("random-word");\nconst runButton = document.getElementById("run");\nconst resetButton = document.getElementById("reset");\nconst determinismCheckbox = document.getElementById("determinism");\nconst delayTextBox = document.getElementById("delay");\nconst inputAlphabet = document.getElementById("alphabet");\nconst inputStates = document.getElementById("states");\nconst inputAcceptingStates = document.getElementById("acceptingStates");\nconst inputInitialState = document.getElementById("initialState");\nconst inputTransitions = document.getElementById("transitions");\nconst inputWord = document.getElementById("word");\nconst outputError = document.getElementById("error");\nconst outputNoErrors = document.getElementById("no-errors");\nconst outputAccepted = document.getElementById("good-result");\nconst outputRejected = document.getElementById("bad-result");\nvar currentAutomaton = undefined;\nvar statesPositions = undefined;\nlet sleepTimeoutId;\nfunction resetDisplay() {\n    outputError.style.display = "none";\n    outputAccepted.style.display = "none";\n    outputRejected.style.display = "none";\n    outputNoErrors.style.display = "block";\n    Drawer.clearCanvas(canvas);\n}\nfunction resetClick() {\n    if (sleepTimeoutId !== undefined) {\n        clearTimeout(sleepTimeoutId);\n        sleepTimeoutId = undefined;\n    }\n    resetDisplay();\n    inputAlphabet.value = "";\n    inputStates.value = "";\n    inputAcceptingStates.value = "";\n    inputInitialState.value = "";\n    inputTransitions.value = "";\n    inputWord.value = "";\n    currentAutomaton = undefined;\n    statesPositions = undefined;\n}\nfunction writeCurrentAutomaton() {\n    if (currentAutomaton === undefined) {\n        throw new Error("no automaton to write");\n    }\n    inputAlphabet.value = [...currentAutomaton.alphabet].join(", ");\n    inputStates.value = [...currentAutomaton.states].join(", ");\n    inputAcceptingStates.value = [...currentAutomaton.acceptingStates].join(", ");\n    inputInitialState.value = currentAutomaton.initialState;\n    const transitionsStrings = [];\n    for (const [source, transitions] of currentAutomaton.transitions) {\n        for (const [char, destinations] of transitions) {\n            for (const destination of destinations) {\n                transitionsStrings.push(`${source}, ${char}, ${destination}`);\n            }\n        }\n    }\n    inputTransitions.value = transitionsStrings.join(" / ");\n}\nfunction readAutomaton() {\n    const alphabet = (0, automata_util_1.valueToCleanArray)(inputAlphabet.value, ",");\n    const states = (0, automata_util_1.valueToCleanArray)(inputStates.value, ",");\n    const acceptingStates = (0, automata_util_1.valueToCleanArray)(inputAcceptingStates.value, ",");\n    const initialState = inputInitialState.value.trim();\n    const transitions = (0, automata_util_1.valueToCleanArray)(inputTransitions.value, "/").map(transition => transition.split(","));\n    if (determinismCheckbox.checked)\n        return automaton_1.DFA.create(alphabet, states, acceptingStates, initialState, transitions);\n    else\n        return automaton_1.NFA.create(alphabet, states, acceptingStates, initialState, transitions);\n}\nfunction submitAutomatonClick() {\n    resetDisplay();\n    try {\n        currentAutomaton = readAutomaton();\n        statesPositions = Drawer.drawAutomaton(canvas, currentAutomaton);\n    }\n    catch (e) {\n        outputError.value = (e instanceof Error) ? e.message : "unknown error";\n        outputError.style.display = "block"; // show errors\n        outputNoErrors.style.display = "none";\n        currentAutomaton = undefined;\n        statesPositions = undefined;\n    }\n    finally {\n        inputWord.value = "";\n    }\n}\nfunction randomAutomatonClick() {\n    resetDisplay();\n    currentAutomaton = (0, automata_util_1.generateAutomaton)(determinismCheckbox.checked);\n    writeCurrentAutomaton();\n    statesPositions = Drawer.drawAutomaton(canvas, currentAutomaton);\n    inputWord.value = "";\n}\nfunction randomWordClick() {\n    const alphabet = (0, automata_util_1.valueToCleanArray)(inputAlphabet.value, ",");\n    inputWord.value = (0, automata_util_1.generateWord)(alphabet);\n}\nfunction sleep(ms) {\n    return new Promise(resolve => {\n        sleepTimeoutId = setTimeout(resolve, ms);\n    });\n}\nfunction runWordClick() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // const sleep = (t: number) => new Promise(resolve => setTimeout(resolve, delay));\n        const input = inputWord.value.trim();\n        submitAutomatonClick();\n        if (currentAutomaton === undefined || statesPositions === undefined) {\n            return;\n        }\n        const delay = parseInt(delayTextBox.value); // ms\n        var pos = statesPositions.get(currentAutomaton.initialState);\n        if (pos === undefined) {\n            throw new Error("cannot find initial state\'s position");\n        }\n        inputWord.value = input;\n        const it = currentAutomaton.iteratorForWord(input);\n        // color the initial state\n        Drawer.drawState(canvas, "blue", pos.x, pos.y, currentAutomaton.initialState, currentAutomaton);\n        yield sleep(delay);\n        while (!it.next().done) {\n            // draw the automata again\n            Drawer.clearCanvas(canvas);\n            Drawer.drawAutomaton(canvas, currentAutomaton);\n            // color the current states\n            for (const state of it.getStates()) {\n                pos = statesPositions.get(state);\n                if (pos === undefined) {\n                    throw new Error("cannot find state\'s position");\n                }\n                Drawer.drawState(canvas, "red", pos.x, pos.y, state, currentAutomaton);\n            }\n            yield sleep(delay);\n        }\n        // leave only accepting states colored\n        Drawer.clearCanvas(canvas);\n        Drawer.drawAutomaton(canvas, currentAutomaton);\n        var accepted = false;\n        for (const state of it.getStates()) {\n            if (currentAutomaton.acceptingStates.has(state)) {\n                pos = statesPositions.get(state);\n                if (pos === undefined) {\n                    throw new Error("cannot find state\'s position");\n                }\n                accepted = true;\n                Drawer.drawState(canvas, "green", pos.x, pos.y, state, currentAutomaton);\n            }\n        }\n        if (accepted) {\n            outputAccepted.style.display = \'block\';\n        }\n        else {\n            outputRejected.style.display = \'block\';\n        }\n    });\n}\nrandomAutomatonButton.addEventListener("click", randomAutomatonClick);\nsubmitAutomatonButton.addEventListener("click", submitAutomatonClick);\nrandomWordButton.addEventListener("click", randomWordClick);\nrunButton.addEventListener("click", runWordClick);\nresetButton.addEventListener("click", resetClick);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBaUQ7QUFDakQsaURBQXlGO0FBQ3pGLHNEQUFnRDtBQUVoRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBc0IsQ0FBQztBQUV0RSxNQUFNLHFCQUFxQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQXNCLENBQUM7QUFDL0YsTUFBTSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBc0IsQ0FBQztBQUNyRixNQUFNLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFzQixDQUFDO0FBQ3JGLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFzQixDQUFDO0FBQ3RFLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFzQixDQUFDO0FBRTFFLE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQXFCLENBQUM7QUFDdkYsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQXFCLENBQUM7QUFFMUUsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQXdCLENBQUM7QUFDakYsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQXdCLENBQUM7QUFDN0UsTUFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUF3QixDQUFDO0FBQy9GLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQXdCLENBQUM7QUFDekYsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBd0IsQ0FBQztBQUN2RixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBd0IsQ0FBQztBQUV6RSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBc0IsQ0FBQztBQUMxRSxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBc0IsQ0FBQztBQUNqRixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBc0IsQ0FBQztBQUNuRixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBc0IsQ0FBQztBQUVsRixJQUFJLGdCQUFnQixHQUFvQixTQUFTLENBQUM7QUFDbEQsSUFBSSxlQUFlLEdBQW9ELFNBQVMsQ0FBQztBQUVqRixJQUFJLGNBQXlELENBQUM7QUFFOUQsU0FBUyxZQUFZO0lBQ2pCLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUNuQyxjQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDdEMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3RDLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN2QyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDZixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMvQixZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0IsY0FBYyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBWSxFQUFFLENBQUM7SUFDZixhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUN6QixXQUFXLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUN2QixvQkFBb0IsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDN0IsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUM1QixTQUFTLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNyQixnQkFBZ0IsR0FBRyxTQUFTLENBQUM7SUFDN0IsZUFBZSxHQUFHLFNBQVMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsU0FBUyxxQkFBcUI7SUFDMUIsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLEVBQUMsQ0FBQztRQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxXQUFXLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUQsb0JBQW9CLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUUsaUJBQWlCLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLFlBQVksQ0FBQztJQUV4RCxNQUFNLGtCQUFrQixHQUFhLEVBQUUsQ0FBQztJQUV4QyxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUksZ0JBQWdCLENBQUMsV0FBVyxFQUFDLENBQUM7UUFDOUQsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJLFdBQVcsRUFBQyxDQUFDO1lBQzVDLEtBQUssTUFBTSxXQUFXLElBQUksWUFBWSxFQUFDLENBQUM7Z0JBQ3BDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sS0FBSyxJQUFJLEtBQUssV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNsRSxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLGFBQWE7SUFDbEIsTUFBTSxRQUFRLEdBQUcscUNBQWlCLEVBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3RCxNQUFNLE1BQU0sR0FBRyxxQ0FBaUIsRUFBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sZUFBZSxHQUFHLHFDQUFpQixFQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzRSxNQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEQsTUFBTSxXQUFXLEdBQUcscUNBQWlCLEVBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUU1RyxJQUFJLG1CQUFtQixDQUFDLE9BQU87UUFDM0IsT0FBTyxlQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQzs7UUFFaEYsT0FBTyxlQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN4RixDQUFDO0FBRUQsU0FBUyxvQkFBb0I7SUFDekIsWUFBWSxFQUFFLENBQUM7SUFFZixJQUFHLENBQUM7UUFDQSxnQkFBZ0IsR0FBRyxhQUFhLEVBQUUsQ0FBQztRQUNuQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQUMsT0FBTSxDQUFDLEVBQUMsQ0FBQztRQUNQLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUN2RSxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBSSxjQUFjO1FBQ3RELGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDN0IsZUFBZSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO1lBQVMsQ0FBQztRQUNQLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxvQkFBb0I7SUFDekIsWUFBWSxFQUFFLENBQUM7SUFFZixnQkFBZ0IsR0FBRyxxQ0FBaUIsRUFBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsRSxxQkFBcUIsRUFBRSxDQUFDO0lBRXhCLGVBQWUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWpFLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxTQUFTLGVBQWU7SUFDcEIsTUFBTSxRQUFRLEdBQUcscUNBQWlCLEVBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUU3RCxTQUFTLENBQUMsS0FBSyxHQUFHLGdDQUFZLEVBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEVBQVU7SUFDckIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN6QixjQUFjLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxTQUFlLFlBQVk7O1FBQ3ZCLG1GQUFtRjtRQUNuRixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXJDLG9CQUFvQixFQUFFLENBQUM7UUFFdkIsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBQyxDQUFDO1lBQ2pFLE9BQU87UUFDWCxDQUFDO1FBRUQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFFakQsSUFBSSxHQUFHLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU3RCxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUMsQ0FBQztZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUVELFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRXhCLE1BQU0sRUFBRSxHQUFHLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuRCwwQkFBMEI7UUFDMUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVoRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuQixPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JCLDBCQUEwQjtZQUUxQixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFL0MsMkJBQTJCO1lBQzNCLEtBQUssTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUM7Z0JBQ2hDLEdBQUcsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVqQyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUMsQ0FBQztvQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2dCQUNwRCxDQUFDO2dCQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDM0UsQ0FBQztZQUVELE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxzQ0FBc0M7UUFFdEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRS9DLElBQUksUUFBUSxHQUFZLEtBQUssQ0FBQztRQUU5QixLQUFLLE1BQU0sS0FBSyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBQyxDQUFDO1lBQ2hDLElBQUksZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDO2dCQUM3QyxHQUFHLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFakMsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFDLENBQUM7b0JBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztnQkFDcEQsQ0FBQztnQkFFRCxRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzdFLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxRQUFRLEVBQUMsQ0FBQztZQUNWLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQyxDQUFDO2FBQU0sQ0FBQztZQUNKLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQyxDQUFDO0lBQ0wsQ0FBQztDQUFBO0FBRUQscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDdEUscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDdEUsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzVELFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9tYXRhLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREZBLCBORkEgfSBmcm9tIFwiLi9hdXRvbWF0b24vYXV0b21hdG9uXCI7XHJcbmltcG9ydCB7IGdlbmVyYXRlQXV0b21hdG9uLCBnZW5lcmF0ZVdvcmQsIHZhbHVlVG9DbGVhbkFycmF5IH0gZnJvbSBcIi4vd2ViL2F1dG9tYXRhLXV0aWxcIjtcclxuaW1wb3J0ICogYXMgRHJhd2VyIGZyb20gXCIuL3dlYi9hdXRvbWF0YS1kcmF3ZXJcIjtcclxuXHJcbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuY29uc3QgcmFuZG9tQXV0b21hdG9uQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYW5kb20tYXV0b21hdG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5jb25zdCBzdWJtaXRBdXRvbWF0b25CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1Ym1pdFwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuY29uc3QgcmFuZG9tV29yZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmFuZG9tLXdvcmRcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmNvbnN0IHJ1bkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicnVuXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5jb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzZXRcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG5jb25zdCBkZXRlcm1pbmlzbUNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXRlcm1pbmlzbVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5jb25zdCBkZWxheVRleHRCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlbGF5XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG5jb25zdCBpbnB1dEFscGhhYmV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbHBoYWJldFwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG5jb25zdCBpbnB1dFN0YXRlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdGVzXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbmNvbnN0IGlucHV0QWNjZXB0aW5nU3RhdGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY2NlcHRpbmdTdGF0ZXNcIikgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcclxuY29uc3QgaW5wdXRJbml0aWFsU3RhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluaXRpYWxTdGF0ZVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG5jb25zdCBpbnB1dFRyYW5zaXRpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cmFuc2l0aW9uc1wiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG5jb25zdCBpbnB1dFdvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndvcmRcIikgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcclxuXHJcbmNvbnN0IG91dHB1dEVycm9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlcnJvclwiKSBhcyBIVE1MT3V0cHV0RWxlbWVudDtcclxuY29uc3Qgb3V0cHV0Tm9FcnJvcnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vLWVycm9yc1wiKSBhcyBIVE1MT3V0cHV0RWxlbWVudDtcclxuY29uc3Qgb3V0cHV0QWNjZXB0ZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdvb2QtcmVzdWx0XCIpIGFzIEhUTUxPdXRwdXRFbGVtZW50O1xyXG5jb25zdCBvdXRwdXRSZWplY3RlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFkLXJlc3VsdFwiKSBhcyBIVE1MT3V0cHV0RWxlbWVudDtcclxuXHJcbnZhciBjdXJyZW50QXV0b21hdG9uOiBORkEgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbnZhciBzdGF0ZXNQb3NpdGlvbnM6IE1hcDxzdHJpbmcsIHt4OiBudW1iZXIsIHk6IG51bWJlcn0+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxubGV0IHNsZWVwVGltZW91dElkOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IHVuZGVmaW5lZDtcclxuXHJcbmZ1bmN0aW9uIHJlc2V0RGlzcGxheSgpe1xyXG4gICAgb3V0cHV0RXJyb3Iuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgb3V0cHV0QWNjZXB0ZWQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgb3V0cHV0UmVqZWN0ZWQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgb3V0cHV0Tm9FcnJvcnMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIERyYXdlci5jbGVhckNhbnZhcyhjYW52YXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldENsaWNrKCl7XHJcbiAgICBpZiAoc2xlZXBUaW1lb3V0SWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChzbGVlcFRpbWVvdXRJZCk7XHJcbiAgICAgICAgc2xlZXBUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXREaXNwbGF5KCk7XHJcbiAgICBpbnB1dEFscGhhYmV0LnZhbHVlID0gXCJcIjtcclxuICAgIGlucHV0U3RhdGVzLnZhbHVlID0gXCJcIjtcclxuICAgIGlucHV0QWNjZXB0aW5nU3RhdGVzLnZhbHVlID0gXCJcIjtcclxuICAgIGlucHV0SW5pdGlhbFN0YXRlLnZhbHVlID0gXCJcIjtcclxuICAgIGlucHV0VHJhbnNpdGlvbnMudmFsdWUgPSBcIlwiO1xyXG4gICAgaW5wdXRXb3JkLnZhbHVlID0gXCJcIjtcclxuICAgIGN1cnJlbnRBdXRvbWF0b24gPSB1bmRlZmluZWQ7XHJcbiAgICBzdGF0ZXNQb3NpdGlvbnMgPSB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyaXRlQ3VycmVudEF1dG9tYXRvbigpe1xyXG4gICAgaWYgKGN1cnJlbnRBdXRvbWF0b24gPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gYXV0b21hdG9uIHRvIHdyaXRlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlucHV0QWxwaGFiZXQudmFsdWUgPSBbLi4uY3VycmVudEF1dG9tYXRvbi5hbHBoYWJldF0uam9pbihcIiwgXCIpO1xyXG4gICAgaW5wdXRTdGF0ZXMudmFsdWUgPSBbLi4uY3VycmVudEF1dG9tYXRvbi5zdGF0ZXNdLmpvaW4oXCIsIFwiKTtcclxuICAgIGlucHV0QWNjZXB0aW5nU3RhdGVzLnZhbHVlID0gWy4uLmN1cnJlbnRBdXRvbWF0b24uYWNjZXB0aW5nU3RhdGVzXS5qb2luKFwiLCBcIik7XHJcbiAgICBpbnB1dEluaXRpYWxTdGF0ZS52YWx1ZSA9IGN1cnJlbnRBdXRvbWF0b24uaW5pdGlhbFN0YXRlO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zaXRpb25zU3RyaW5nczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtzb3VyY2UsIHRyYW5zaXRpb25zXSBvZiBjdXJyZW50QXV0b21hdG9uLnRyYW5zaXRpb25zKXtcclxuICAgICAgICBmb3IgKGNvbnN0IFtjaGFyLCBkZXN0aW5hdGlvbnNdIG9mIHRyYW5zaXRpb25zKXtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkZXN0aW5hdGlvbiBvZiBkZXN0aW5hdGlvbnMpe1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbnNTdHJpbmdzLnB1c2goYCR7c291cmNlfSwgJHtjaGFyfSwgJHtkZXN0aW5hdGlvbn1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbnB1dFRyYW5zaXRpb25zLnZhbHVlID0gdHJhbnNpdGlvbnNTdHJpbmdzLmpvaW4oXCIgLyBcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRBdXRvbWF0b24oKSA6IE5GQSB7XHJcbiAgICBjb25zdCBhbHBoYWJldCA9IHZhbHVlVG9DbGVhbkFycmF5KGlucHV0QWxwaGFiZXQudmFsdWUsIFwiLFwiKTtcclxuICAgIGNvbnN0IHN0YXRlcyA9IHZhbHVlVG9DbGVhbkFycmF5KGlucHV0U3RhdGVzLnZhbHVlLCBcIixcIik7XHJcbiAgICBjb25zdCBhY2NlcHRpbmdTdGF0ZXMgPSB2YWx1ZVRvQ2xlYW5BcnJheShpbnB1dEFjY2VwdGluZ1N0YXRlcy52YWx1ZSwgXCIsXCIpO1xyXG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gaW5wdXRJbml0aWFsU3RhdGUudmFsdWUudHJpbSgpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvbnMgPSB2YWx1ZVRvQ2xlYW5BcnJheShpbnB1dFRyYW5zaXRpb25zLnZhbHVlLCBcIi9cIikubWFwKHRyYW5zaXRpb24gPT4gdHJhbnNpdGlvbi5zcGxpdChcIixcIikpO1xyXG5cclxuICAgIGlmIChkZXRlcm1pbmlzbUNoZWNrYm94LmNoZWNrZWQpXHJcbiAgICAgICAgcmV0dXJuIERGQS5jcmVhdGUoYWxwaGFiZXQsIHN0YXRlcywgYWNjZXB0aW5nU3RhdGVzLCBpbml0aWFsU3RhdGUsIHRyYW5zaXRpb25zKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gTkZBLmNyZWF0ZShhbHBoYWJldCwgc3RhdGVzLCBhY2NlcHRpbmdTdGF0ZXMsIGluaXRpYWxTdGF0ZSwgdHJhbnNpdGlvbnMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdWJtaXRBdXRvbWF0b25DbGljaygpIHtcclxuICAgIHJlc2V0RGlzcGxheSgpO1xyXG5cclxuICAgIHRyeXtcclxuICAgICAgICBjdXJyZW50QXV0b21hdG9uID0gcmVhZEF1dG9tYXRvbigpO1xyXG4gICAgICAgIHN0YXRlc1Bvc2l0aW9ucyA9IERyYXdlci5kcmF3QXV0b21hdG9uKGNhbnZhcywgY3VycmVudEF1dG9tYXRvbik7XHJcbiAgICB9IGNhdGNoKGUpe1xyXG4gICAgICAgIG91dHB1dEVycm9yLnZhbHVlID0gKGUgaW5zdGFuY2VvZiBFcnJvcikgPyBlLm1lc3NhZ2UgOiBcInVua25vd24gZXJyb3JcIjtcclxuICAgICAgICBvdXRwdXRFcnJvci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiOyAgICAvLyBzaG93IGVycm9yc1xyXG4gICAgICAgIG91dHB1dE5vRXJyb3JzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgXHJcbiAgICAgICAgY3VycmVudEF1dG9tYXRvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICBzdGF0ZXNQb3NpdGlvbnMgPSB1bmRlZmluZWQ7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIGlucHV0V29yZC52YWx1ZSA9IFwiXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJhbmRvbUF1dG9tYXRvbkNsaWNrKCl7XHJcbiAgICByZXNldERpc3BsYXkoKTtcclxuXHJcbiAgICBjdXJyZW50QXV0b21hdG9uID0gZ2VuZXJhdGVBdXRvbWF0b24oZGV0ZXJtaW5pc21DaGVja2JveC5jaGVja2VkKTtcclxuXHJcbiAgICB3cml0ZUN1cnJlbnRBdXRvbWF0b24oKTtcclxuXHJcbiAgICBzdGF0ZXNQb3NpdGlvbnMgPSBEcmF3ZXIuZHJhd0F1dG9tYXRvbihjYW52YXMsIGN1cnJlbnRBdXRvbWF0b24pO1xyXG5cclxuICAgIGlucHV0V29yZC52YWx1ZSA9IFwiXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJhbmRvbVdvcmRDbGljaygpe1xyXG4gICAgY29uc3QgYWxwaGFiZXQgPSB2YWx1ZVRvQ2xlYW5BcnJheShpbnB1dEFscGhhYmV0LnZhbHVlLCBcIixcIik7XHJcblxyXG4gICAgaW5wdXRXb3JkLnZhbHVlID0gZ2VuZXJhdGVXb3JkKGFscGhhYmV0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIHNsZWVwVGltZW91dElkID0gc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcnVuV29yZENsaWNrKCl7XHJcbiAgICAvLyBjb25zdCBzbGVlcCA9ICh0OiBudW1iZXIpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xyXG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFdvcmQudmFsdWUudHJpbSgpO1xyXG5cclxuICAgIHN1Ym1pdEF1dG9tYXRvbkNsaWNrKCk7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRBdXRvbWF0b24gPT09IHVuZGVmaW5lZCB8fCBzdGF0ZXNQb3NpdGlvbnMgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZGVsYXlUZXh0Qm94LnZhbHVlKTsgLy8gbXNcclxuXHJcbiAgICB2YXIgcG9zID0gc3RhdGVzUG9zaXRpb25zLmdldChjdXJyZW50QXV0b21hdG9uLmluaXRpYWxTdGF0ZSk7XHJcblxyXG4gICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZmluZCBpbml0aWFsIHN0YXRlJ3MgcG9zaXRpb25cIik7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXRXb3JkLnZhbHVlID0gaW5wdXQ7XHJcblxyXG4gICAgY29uc3QgaXQgPSBjdXJyZW50QXV0b21hdG9uLml0ZXJhdG9yRm9yV29yZChpbnB1dCk7XHJcblxyXG4gICAgLy8gY29sb3IgdGhlIGluaXRpYWwgc3RhdGVcclxuICAgIERyYXdlci5kcmF3U3RhdGUoY2FudmFzLCBcImJsdWVcIiwgcG9zLngsIHBvcy55LCBjdXJyZW50QXV0b21hdG9uLmluaXRpYWxTdGF0ZSwgY3VycmVudEF1dG9tYXRvbik7XHJcblxyXG4gICAgYXdhaXQgc2xlZXAoZGVsYXkpO1xyXG5cclxuICAgIHdoaWxlICghaXQubmV4dCgpLmRvbmUpIHtcclxuICAgICAgICAvLyBkcmF3IHRoZSBhdXRvbWF0YSBhZ2FpblxyXG5cclxuICAgICAgICBEcmF3ZXIuY2xlYXJDYW52YXMoY2FudmFzKTtcclxuICAgICAgICBEcmF3ZXIuZHJhd0F1dG9tYXRvbihjYW52YXMsIGN1cnJlbnRBdXRvbWF0b24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGNvbG9yIHRoZSBjdXJyZW50IHN0YXRlc1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhdGUgb2YgaXQuZ2V0U3RhdGVzKCkpe1xyXG4gICAgICAgICAgICBwb3MgPSBzdGF0ZXNQb3NpdGlvbnMuZ2V0KHN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZmluZCBzdGF0ZSdzIHBvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBEcmF3ZXIuZHJhd1N0YXRlKGNhbnZhcywgXCJyZWRcIiwgcG9zLngsIHBvcy55LCBzdGF0ZSwgY3VycmVudEF1dG9tYXRvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCBzbGVlcChkZWxheSk7XHJcbiAgICB9IFxyXG5cclxuICAgIC8vIGxlYXZlIG9ubHkgYWNjZXB0aW5nIHN0YXRlcyBjb2xvcmVkXHJcblxyXG4gICAgRHJhd2VyLmNsZWFyQ2FudmFzKGNhbnZhcyk7XHJcbiAgICBEcmF3ZXIuZHJhd0F1dG9tYXRvbihjYW52YXMsIGN1cnJlbnRBdXRvbWF0b24pO1xyXG5cclxuICAgIHZhciBhY2NlcHRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgZm9yIChjb25zdCBzdGF0ZSBvZiBpdC5nZXRTdGF0ZXMoKSl7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRBdXRvbWF0b24uYWNjZXB0aW5nU3RhdGVzLmhhcyhzdGF0ZSkpe1xyXG4gICAgICAgICAgICBwb3MgPSBzdGF0ZXNQb3NpdGlvbnMuZ2V0KHN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZmluZCBzdGF0ZSdzIHBvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhY2NlcHRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIERyYXdlci5kcmF3U3RhdGUoY2FudmFzLCBcImdyZWVuXCIsIHBvcy54LCBwb3MueSwgc3RhdGUsIGN1cnJlbnRBdXRvbWF0b24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWNjZXB0ZWQpe1xyXG4gICAgICAgIG91dHB1dEFjY2VwdGVkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBvdXRwdXRSZWplY3RlZC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH1cclxufVxyXG5cclxucmFuZG9tQXV0b21hdG9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByYW5kb21BdXRvbWF0b25DbGljayk7XHJcbnN1Ym1pdEF1dG9tYXRvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3VibWl0QXV0b21hdG9uQ2xpY2spO1xyXG5yYW5kb21Xb3JkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByYW5kb21Xb3JkQ2xpY2spO1xyXG5ydW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJ1bldvcmRDbGljayk7XHJcbnJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByZXNldENsaWNrKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///156\n')},669:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.clearCanvas = clearCanvas;\nexports.drawState = drawState;\nexports.drawAutomaton = drawAutomaton;\nconst ST_RAD_OUT = 30, ST_RAD_IN = 25, ST_FONT = "20px Cambria";\nconst TR_ARR_HEAD = 10, TR_SELF_RAD = 15, TR_PAD = 10, TR_ELV = 30, TR_FONT = "20px Cambria";\nconst INIT_ARR_LEN = 20, INIT_ARR_PAD = 10, INIT_ARR_HEAD = 10;\nconst EPSILON = \'ε\', LEFT_ARROW = "← ", RIGHT_ARROW = " →";\nfunction clearCanvas(canvas) {\n    const ctx = canvas.getContext("2d");\n    if (ctx === null) {\n        throw new Error("cannot get context");\n    }\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n/**\n * draw a state in the automata diagram.\n * @param canvas the canvas to draw on.\n * @param x the x coordinate of the center of the state\'s circle.\n * @param y the y coordinate of the center of the state\'s circle.\n * @param state the state.\n * @param automaton the entire NFA.\n */\nfunction drawState(canvas, color, x, y, state, automaton) {\n    const ctx = canvas.getContext("2d");\n    if (ctx === null) {\n        throw new Error("cannot get context");\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n    // draw the outer circle\n    ctx.beginPath();\n    ctx.arc(x, y, ST_RAD_OUT, 0, 2 * Math.PI);\n    ctx.stroke();\n    // write the state\'s name\n    ctx.font = ST_FONT;\n    ctx.textAlign = \'center\';\n    ctx.textBaseline = \'middle\';\n    ctx.fillText(state, x, y);\n    if (automaton.acceptingStates.has(state)) {\n        // draw th inner circle\n        ctx.beginPath();\n        ctx.arc(x, y, ST_RAD_IN, 0, 2 * Math.PI);\n        ctx.stroke();\n    }\n    ctx.restore();\n    if (state === automaton.initialState) {\n        // draw an arrow above the outer circle\n        ctx.beginPath();\n        ctx.moveTo(x, y - ST_RAD_OUT - INIT_ARR_PAD - INIT_ARR_LEN);\n        ctx.lineTo(x, y - ST_RAD_OUT - INIT_ARR_PAD);\n        ctx.stroke();\n        // draw the arrowhead\n        ctx.beginPath();\n        ctx.moveTo(x - INIT_ARR_HEAD * Math.cos(Math.PI / 3), y - ST_RAD_OUT - INIT_ARR_PAD - INIT_ARR_HEAD * Math.sin(Math.PI / 3));\n        ctx.lineTo(x + INIT_ARR_HEAD * Math.cos(Math.PI / 3), y - ST_RAD_OUT - INIT_ARR_PAD - INIT_ARR_HEAD * Math.sin(Math.PI / 3));\n        ctx.lineTo(x, y - ST_RAD_OUT - INIT_ARR_PAD);\n        ctx.closePath();\n        ctx.fill();\n    }\n}\n/**\n * draw a transition from a state to itself.\n * @param canvas the canvas to draw on.\n * @param x the x coordinate of the center of the state\'s circle.\n * @param y the y coordinate of the center of the state\'s circle.\n * @param char the char (or characters) that define this transition.\n */\nfunction drawSelfTransition(canvas, x, y, char) {\n    const ctx = canvas.getContext("2d");\n    if (ctx === null) {\n        throw new Error("cannot get context");\n    }\n    const centerX = canvas.width / 2, centerY = canvas.height / 2;\n    const angle = Math.atan2(y - centerY, x - centerX);\n    const loopCenterY = y + (TR_SELF_RAD + ST_RAD_OUT) * Math.sin(angle);\n    const loopCenterX = x + (TR_SELF_RAD + ST_RAD_OUT) * Math.cos(angle);\n    const startAngle = 3 / 4 * Math.PI;\n    const endAngle = 1 / 4 * Math.PI;\n    // draw the arc\n    ctx.beginPath();\n    ctx.arc(loopCenterX, loopCenterY, TR_SELF_RAD, Math.PI / 2 + angle + startAngle, Math.PI / 2 + angle + endAngle);\n    ctx.stroke();\n    // arrow endpoint\n    const arrowX = loopCenterX + TR_SELF_RAD * Math.cos(Math.PI / 2 + angle + endAngle);\n    const arrowY = loopCenterY + TR_SELF_RAD * Math.sin(Math.PI / 2 + angle + endAngle);\n    // arrowhead\n    const arrowAngle = (Math.PI / 2 + angle + endAngle) + Math.PI / 2;\n    ctx.beginPath();\n    ctx.moveTo(arrowX, arrowY);\n    ctx.lineTo(arrowX - TR_ARR_HEAD * Math.cos(arrowAngle - Math.PI / 6), arrowY - TR_ARR_HEAD * Math.sin(arrowAngle - Math.PI / 6));\n    ctx.moveTo(arrowX, arrowY);\n    ctx.lineTo(arrowX - TR_ARR_HEAD * Math.cos(arrowAngle + Math.PI / 6), arrowY - TR_ARR_HEAD * Math.sin(arrowAngle + Math.PI / 6));\n    ctx.stroke();\n    // write the letter\n    const controlX = x + (2 * TR_SELF_RAD + ST_RAD_OUT + TR_PAD) * Math.cos(angle);\n    const controlY = y + (2 * TR_SELF_RAD + ST_RAD_OUT + TR_PAD) * Math.sin(angle);\n    ctx.save();\n    ctx.translate(controlX, controlY);\n    if (angle > Math.PI / 2 || angle < -Math.PI / 2)\n        // the text is "too upside down"\n        ctx.rotate(angle + Math.PI);\n    else\n        ctx.rotate(angle);\n    ctx.font = TR_FONT;\n    ctx.fillText(char === \'\' ? EPSILON : char, 0, 0);\n    ctx.restore();\n}\n/**\n * draw a transition (arrow) in the automaton diagram.\n * @param ctx canvas\' context.\n * @param x1 source state\'s circle x coordinate.\n * @param y1 source state\'s circle y coordinate.\n * @param x2 destination state\'s circle x coordinate.\n * @param y2 destination state\'s circle y coordinate.\n * @param char the char(s) corresponding to the transition.\n */\nfunction drawTransition(canvas, x1, y1, x2, y2, char) {\n    const ctx = canvas.getContext("2d");\n    if (ctx === null) {\n        throw new Error("cannot get context");\n    }\n    // self loop\n    if (x1 === x2 && y1 === y2) {\n        drawSelfTransition(canvas, x1, y1, char);\n        return;\n    }\n    // two different states\n    const angle = Math.atan2(y2 - y1, x2 - x1);\n    const startX = x1 + ST_RAD_OUT * Math.cos(angle), endX = x2 - ST_RAD_OUT * Math.cos(angle);\n    const startY = y1 + ST_RAD_OUT * Math.sin(angle), endY = y2 - ST_RAD_OUT * Math.sin(angle);\n    const midX = (startX + endX) / 2, midY = (startY + endY) / 2;\n    const dx = endX - startX, dy = endY - startY;\n    const perpX = -dy, perpY = dx;\n    // normalize the perpendicular vector\n    const length = Math.sqrt(perpX * perpX + perpY * perpY);\n    const unitPerpX = perpX / length;\n    const unitPerpY = perpY / length;\n    // control point for the quadratic curve\n    const controlX = midX + unitPerpX * TR_ELV;\n    const controlY = midY + unitPerpY * TR_ELV;\n    // draw the arc\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.quadraticCurveTo(controlX, controlY, endX, endY);\n    ctx.stroke();\n    // draw the head\n    ctx.beginPath();\n    ctx.moveTo(endX, endY);\n    ctx.lineTo(endX - TR_ARR_HEAD * Math.cos(angle - Math.PI / 6), endY - TR_ARR_HEAD * Math.sin(angle - Math.PI / 6));\n    ctx.moveTo(endX, endY);\n    ctx.lineTo(endX - TR_ARR_HEAD * Math.cos(angle + Math.PI / 6), endY - TR_ARR_HEAD * Math.sin(angle + Math.PI / 6));\n    ctx.stroke();\n    // write the letter\n    ctx.save();\n    ctx.translate(controlX, controlY);\n    if (angle > Math.PI / 2 || angle < -Math.PI / 2)\n        // the text is "too upside down"\n        ctx.rotate(angle + Math.PI);\n    else\n        ctx.rotate(angle);\n    ctx.font = TR_FONT;\n    if (endX > startX)\n        ctx.fillText((char === \'\' ? EPSILON : char) + RIGHT_ARROW, 0, 0);\n    else if (endX < startX)\n        ctx.fillText(LEFT_ARROW + (char === \'\' ? EPSILON : char), 0, 0);\n    else if (endY > startY)\n        // same x but the arrow is at the bottom end of the transition arrow\n        ctx.fillText((char === \'\' ? EPSILON : char) + RIGHT_ARROW, 0, 0);\n    else\n        ctx.fillText(LEFT_ARROW + (char === \'\' ? EPSILON : char), 0, 0);\n    ctx.restore();\n}\n/**\n * calculate the position of each state\'s circle in the canvas.\n * @param canvas the canvas.\n * @param automaton the automaton.\n * @returns a mapping of states and positions (state, {x, y}).\n */\nfunction calculatePositions(canvas, automaton) {\n    const centerX = canvas.width / 2, centerY = canvas.height / 2;\n    const rotationPerState = (2 * Math.PI) / automaton.states.size;\n    const margin = ST_RAD_OUT + TR_PAD + 2 * TR_SELF_RAD + 30;\n    const radius = Math.min(canvas.width, canvas.height) / 2 - margin;\n    const map = new Map();\n    [...automaton.states].forEach((state, index) => map.set(state, {\n        x: centerX + radius * Math.cos(index * rotationPerState),\n        y: centerY + radius * Math.sin(index * rotationPerState)\n    }));\n    return map;\n}\n/**\n * draw an entire automaton diagram.\n * @param canvas a canvas to draw on.\n * @param automaton an automaton to draw.\n * @returns the positions of the states.\n */\nfunction drawAutomaton(canvas, automaton) {\n    const positions = calculatePositions(canvas, automaton);\n    const sameEnds = (f, s) => f[0] === s[0] && f[2] === s[2];\n    for (const [state, position] of positions) {\n        drawState(canvas, "black", position.x, position.y, state, automaton);\n    }\n    for (const [src, transitions] of automaton.transitions) {\n        const fromSrc = new Map();\n        // add char to dest\n        for (var [char, dests] of transitions) {\n            char = char === \'\' ? EPSILON : char;\n            for (const dest of dests) {\n                const destEntry = fromSrc.get(dest);\n                if (destEntry) {\n                    destEntry.add(char);\n                }\n                else {\n                    fromSrc.set(dest, new Set([char]));\n                }\n            }\n        }\n        // draw all the arrows from the current source\n        const srcPos = positions.get(src);\n        if (srcPos === undefined) {\n            throw new Error("missing source\'s position");\n        }\n        const { x: x1, y: y1 } = srcPos;\n        for (const [dest, chars] of fromSrc) {\n            const destPos = positions.get(dest);\n            if (destPos === undefined) {\n                throw new Error("missing destinations\'s position");\n            }\n            const { x: x2, y: y2 } = destPos;\n            drawTransition(canvas, x1, y1, x2, y2, [...chars].join(", "));\n        }\n    }\n    return positions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///669\n')},596:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.generateAutomaton = generateAutomaton;\nexports.generateWord = generateWord;\nexports.valueToCleanArray = valueToCleanArray;\nconst automaton_1 = __webpack_require__(719);\nconst util_1 = __webpack_require__(229);\nfunction generateAutomaton(deterministic) {\n    const letterPool = "abcdefghijklmnopqrstuvwxyz";\n    const alphabet = (0, util_1.randomElements)(letterPool, (0, util_1.randomInteger)(1, letterPool.length));\n    const states = Array.from({ length: (0, util_1.randomInteger)(1, 8) }, (_, k) => "q" + k);\n    const acceptingStates = (0, util_1.randomElements)(states, (0, util_1.randomInteger)(0, states.length));\n    const initialState = (0, util_1.randomElements)(states, 1)[0];\n    const transitions = Array.from({ length: (0, util_1.randomInteger)(0, states.length * states.length / 2) }, (_) => [\n        (0, util_1.randomElements)(states, 1)[0], (0, util_1.randomElements)(alphabet.concat([\'\']), 1)[0], (0, util_1.randomElements)(states, 1)[0]\n    ]);\n    if (deterministic) {\n        const noEpsilonTransitions = transitions.filter(transition => transition[1] !== \'\');\n        const noDuplicates = noEpsilonTransitions.filter((transition, index) => noEpsilonTransitions.findIndex(other => transition[0] === other[0] && transition[1] === other[1]) === index);\n        return automaton_1.DFA.create(alphabet, states, acceptingStates, initialState, noDuplicates);\n    }\n    return automaton_1.NFA.create(alphabet, states, acceptingStates, initialState, transitions);\n}\nfunction generateWord(alphabet) {\n    return Array.from({ length: (0, util_1.randomInteger)(0, 10) }, () => (0, util_1.randomElements)(alphabet, 1)).join(\'\');\n}\nfunction valueToCleanArray(value, separator) {\n    const clear = value.replace(/\\s+/g, "");\n    return clear.length === 0 ? [] : clear.split(separator);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRSxFQUFFLENBQUMsQ0FBQztJQUV4QyxPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9tYXRhLy4vc3JjL3dlYi9hdXRvbWF0YS11dGlsLnRzPzgxMmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTkZBLCBERkEgfSBmcm9tIFwiLi4vYXV0b21hdG9uL2F1dG9tYXRvblwiXHJcbmltcG9ydCB7IHJhbmRvbUludGVnZXIsIHJhbmRvbUVsZW1lbnRzIH0gZnJvbSBcIi4uL2F1dG9tYXRvbi91dGlsXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVBdXRvbWF0b24oZGV0ZXJtaW5pc3RpYzogYm9vbGVhbikgOiBORkF7XHJcbiAgICBjb25zdCBsZXR0ZXJQb29sID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xyXG5cclxuICAgIGNvbnN0IGFscGhhYmV0OiBzdHJpbmdbXSA9IHJhbmRvbUVsZW1lbnRzKGxldHRlclBvb2wsIHJhbmRvbUludGVnZXIoMSwgbGV0dGVyUG9vbC5sZW5ndGgpKTtcclxuXHJcbiAgICBjb25zdCBzdGF0ZXM6IHN0cmluZ1tdID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogcmFuZG9tSW50ZWdlcigxLCA4KSB9LCAoXywgaykgPT4gXCJxXCIgKyBrKTtcclxuXHJcbiAgICBjb25zdCBhY2NlcHRpbmdTdGF0ZXM6IHN0cmluZ1tdID0gcmFuZG9tRWxlbWVudHMoc3RhdGVzLCByYW5kb21JbnRlZ2VyKDAsIHN0YXRlcy5sZW5ndGgpKTtcclxuXHJcbiAgICBjb25zdCBpbml0aWFsU3RhdGU6IHN0cmluZyA9IHJhbmRvbUVsZW1lbnRzKHN0YXRlcywgMSlbMF07XHJcblxyXG4gICAgY29uc3QgdHJhbnNpdGlvbnM6IHN0cmluZ1tdW10gPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiByYW5kb21JbnRlZ2VyKDAsIHN0YXRlcy5sZW5ndGggKiBzdGF0ZXMubGVuZ3RoIC8gMikgfSwgKF8pID0+IFtcclxuICAgICAgICByYW5kb21FbGVtZW50cyhzdGF0ZXMsIDEpWzBdLCByYW5kb21FbGVtZW50cyhhbHBoYWJldC5jb25jYXQoWycnXSksIDEpWzBdLCByYW5kb21FbGVtZW50cyhzdGF0ZXMsIDEpWzBdXHJcbiAgICBdKTtcclxuXHJcbiAgICBpZiAoZGV0ZXJtaW5pc3RpYyl7XHJcbiAgICAgICAgY29uc3Qgbm9FcHNpbG9uVHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucy5maWx0ZXIodHJhbnNpdGlvbiA9PiB0cmFuc2l0aW9uWzFdICE9PSAnJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5vRHVwbGljYXRlcyA9IG5vRXBzaWxvblRyYW5zaXRpb25zLmZpbHRlcigodHJhbnNpdGlvbiwgaW5kZXgpID0+IFxyXG4gICAgICAgICAgICBub0Vwc2lsb25UcmFuc2l0aW9ucy5maW5kSW5kZXgob3RoZXIgPT4gdHJhbnNpdGlvblswXSA9PT0gb3RoZXJbMF0gJiYgdHJhbnNpdGlvblsxXSA9PT0gb3RoZXJbMV0pID09PSBpbmRleFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBERkEuY3JlYXRlKGFscGhhYmV0LCBzdGF0ZXMsIGFjY2VwdGluZ1N0YXRlcywgaW5pdGlhbFN0YXRlLCBub0R1cGxpY2F0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBORkEuY3JlYXRlKGFscGhhYmV0LCBzdGF0ZXMsIGFjY2VwdGluZ1N0YXRlcywgaW5pdGlhbFN0YXRlLCB0cmFuc2l0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVdvcmQoYWxwaGFiZXQ6IHN0cmluZ1tdKSA6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogcmFuZG9tSW50ZWdlcigwLCAxMCkgfSwgKCkgPT4gcmFuZG9tRWxlbWVudHMoYWxwaGFiZXQsIDEpKS5qb2luKCcnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlVG9DbGVhbkFycmF5KHZhbHVlOiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKSA6IHN0cmluZ1tde1xyXG4gICAgY29uc3QgY2xlYXIgPSB2YWx1ZS5yZXBsYWNlKC9cXHMrL2csIFwiXCIpO1xyXG5cclxuICAgIHJldHVybiBjbGVhci5sZW5ndGggPT09IDAgPyBbXSA6IGNsZWFyLnNwbGl0KHNlcGFyYXRvcik7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///596\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(U.exports,U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(156)})();